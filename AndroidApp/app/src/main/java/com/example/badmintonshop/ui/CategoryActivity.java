package com.example.badmintonshop.ui;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.badmintonshop.ui.CartActivity;
import com.example.badmintonshop.R;
import com.example.badmintonshop.adapter.CategoryListAdapter;
import com.example.badmintonshop.adapter.ProductAdapter;
// üö© S·ª¨A ƒê·ªîI: S·ª≠ d·ª•ng ApiClient ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán
import com.example.badmintonshop.network.ApiClient;
import com.example.badmintonshop.network.ApiService;
import com.example.badmintonshop.network.dto.CategoryDto;
import com.example.badmintonshop.network.dto.CategoryListResponse;
import com.example.badmintonshop.network.dto.ProductDto;
import com.example.badmintonshop.network.dto.ProductListResponse;
import com.example.badmintonshop.network.dto.ApiResponse;
import com.example.badmintonshop.network.dto.WishlistAddRequest;
import com.example.badmintonshop.network.dto.WishlistDeleteRequest;
import com.example.badmintonshop.network.dto.WishlistGetResponse;

import com.google.android.material.bottomnavigation.BottomNavigationView;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;


public class CategoryActivity extends AppCompatActivity {

    private RecyclerView recyclerCategoryList, recyclerProductGrid;
    private CategoryListAdapter categoryAdapter;
    private ApiService api;
    TextView tvSearchBarCategory;
    private BottomNavigationView bottomNav;

    private final Set<Integer> favoriteProductIds = new HashSet<>();

    // H√†m ti·ªán √≠ch ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    private boolean isLoggedIn() {
        // N√™n s·ª≠ d·ª•ng h·∫±ng s·ªë cho t√™n file v√† key ƒë·ªÉ tr√°nh l·ªói ch√≠nh t·∫£
        SharedPreferences sp = getSharedPreferences("auth", MODE_PRIVATE);
        return sp.getInt("customerID", -1) != -1;
    }

    // H√†m ti·ªán √≠ch l·∫•y customerID hi·ªán t·∫°i
    private int getCurrentCustomerId() {
        SharedPreferences sp = getSharedPreferences("auth", MODE_PRIVATE);
        return sp.getInt("customerID", -1);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_category);

        recyclerCategoryList = findViewById(R.id.recyclerCategoryList);
        recyclerProductGrid = findViewById(R.id.recyclerProductGrid);
        bottomNav = findViewById(R.id.bottomNav);
        tvSearchBarCategory = findViewById(R.id.tvSearchBarCategory);

        // üö© S·ª¨A ƒê·ªîI: Kh·ªüi t·∫°o API m·ªôt c√°ch nh·∫•t qu√°n, kh√¥ng c·∫ßn truy·ªÅn baseUrl
        api = ApiClient.getApiService();

        setupProductGrid();
        updateBottomNavLabel();

        // B·∫Øt ƒë·∫ßu chu·ªói t·∫£i d·ªØ li·ªáu: T·∫£i Wishlist -> T·∫£i Danh m·ª•c -> T·∫£i S·∫£n ph·∫©m
        loadFavoriteIdsAndThenLoadProducts();

        tvSearchBarCategory.setOnClickListener(v -> {
            startActivity(new Intent(CategoryActivity.this, SearchActivity.class));
        });

        // X·ª≠ l√Ω bottom navigation
        bottomNav.setOnItemSelectedListener(item -> {
            int id = item.getItemId();
            if (id == R.id.nav_home) {
                startActivity(new Intent(this, HomeActivity.class));
                return true;
            } else if (id == R.id.nav_categories) {
                // ƒêang ·ªü m√†n h√¨nh n√†y, kh√¥ng c·∫ßn l√†m g√¨
                return true;
            } else if (id == R.id.nav_you) {
                if (isLoggedIn()) {
                    showLogoutConfirmDialog();
                } else {
                    startActivity(new Intent(this, LoginActivity.class));
                }
                return true;
            } else if (id == R.id.nav_cart) {
                // üö© S·ª¨A ƒê·ªîI: Chuy·ªÉn ƒë·∫øn CartActivity thay v√¨ hi·ªÉn th·ªã Toast
                startActivity(new Intent(this, CartActivity.class));
                return true;
            }
            return false;
        });
    }

    @Override
    protected void onResume() {
        super.onResume();
        // C·∫≠p nh·∫≠t l·∫°i nh√£n v√† danh s√°ch y√™u th√≠ch khi quay l·∫°i m√†n h√¨nh
        updateBottomNavLabel();
        loadFavoriteIdsAndThenLoadProducts(); // T·∫£i l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u th√≠ch
    }

    private void updateBottomNavLabel() {
        SharedPreferences sp = getSharedPreferences("auth", MODE_PRIVATE);
        String customerName = sp.getString("fullName", null);

        if (customerName != null && !customerName.isEmpty()) {
            String shortName = customerName.split(" ")[0];
            bottomNav.getMenu().findItem(R.id.nav_you).setTitle(shortName);
        } else {
            bottomNav.getMenu().findItem(R.id.nav_you).setTitle("You");
        }
    }

    private void loadFavoriteIdsAndThenLoadProducts() {
        if (!isLoggedIn()) {
            favoriteProductIds.clear();
            loadCategories(); // V·∫´n t·∫£i danh m·ª•c ƒë·ªÉ hi·ªÉn th·ªã
            return;
        }

        api.getWishlist(getCurrentCustomerId()).enqueue(new Callback<WishlistGetResponse>() {
            @Override
            public void onResponse(Call<WishlistGetResponse> call, Response<WishlistGetResponse> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    favoriteProductIds.clear();
                    List<ProductDto> wishlist = response.body().getWishlist();
                    if (wishlist != null) {
                        for (ProductDto p : wishlist) {
                            favoriteProductIds.add(p.getProductID());
                        }
                    }
                }
                loadCategories();
            }

            @Override
            public void onFailure(Call<WishlistGetResponse> call, Throwable t) {
                loadCategories(); // D√π l·ªói v·∫´n ti·∫øp t·ª•c t·∫£i UI ch√≠nh
            }
        });
    }

    private void loadCategories() {
// üö© S·ª¨A ƒê·ªîI: B·ªè ph·∫ßn HORIZONTAL ƒëi ƒë·ªÉ n√≥ hi·ªÉn th·ªã theo chi·ªÅu d·ªçc m·∫∑c ƒë·ªãnh
        recyclerCategoryList.setLayoutManager(new LinearLayoutManager(this));

        api.getCategories().enqueue(new Callback<CategoryListResponse>() {
            @Override
            public void onResponse(Call<CategoryListResponse> call, Response<CategoryListResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    List<CategoryDto> categories = response.body().getItems();
                    List<String> categoryNames = new ArrayList<>();
                    categoryNames.add("Featured"); // Th√™m m·ª•c "Featured"
                    for (CategoryDto c : categories) {
                        categoryNames.add(c.getCategoryName());
                    }

                    categoryAdapter = new CategoryListAdapter(categoryNames, categoryName -> {
                        loadProductsForCategory(categoryName);
                    });
                    recyclerCategoryList.setAdapter(categoryAdapter);

                    // T·∫£i s·∫£n ph·∫©m cho danh m·ª•c ƒë·∫ßu ti√™n m·∫∑c ƒë·ªãnh
                    if (!categoryNames.isEmpty()) {
                        loadProductsForCategory(categoryNames.get(0));
                    }
                } else {
                    Toast.makeText(CategoryActivity.this, "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh m·ª•c!", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void onFailure(Call<CategoryListResponse> call, Throwable t) {
                Toast.makeText(CategoryActivity.this, "L·ªói k·∫øt n·ªëi: " + t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void setupProductGrid() {
        recyclerProductGrid.setLayoutManager(new GridLayoutManager(this, 2));
    }

    private void loadProductsForCategory(String categoryName) {
        Call<ProductListResponse> call;
        if (categoryName.equalsIgnoreCase("Featured")) {
            // N·∫øu l√† "Featured", l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
            call = api.getProducts(1, 20);
        } else {
            // N·∫øu l√† danh m·ª•c c·ª• th·ªÉ, l·ªçc theo t√™n
            call = api.getProductsByCategory(categoryName);
        }

        call.enqueue(new Callback<ProductListResponse>() {
            @Override
            public void onResponse(Call<ProductListResponse> call, Response<ProductListResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    updateProductGrid(response.body().getItems());
                } else {
                    Toast.makeText(CategoryActivity.this, "Kh√¥ng c√≥ s·∫£n ph·∫©m trong danh m·ª•c n√†y", Toast.LENGTH_SHORT).show();
                    updateProductGrid(new ArrayList<>()); // Hi·ªÉn th·ªã danh s√°ch r·ªóng
                }
            }

            @Override
            public void onFailure(Call<ProductListResponse> call, Throwable t) {
                Toast.makeText(CategoryActivity.this, "L·ªói: " + t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }

    // üö© S·ª¨A ƒê·ªîI: H√†m m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t l∆∞·ªõi s·∫£n ph·∫©m, tr√°nh l·∫∑p code
    private void updateProductGrid(List<ProductDto> products) {
        if (products == null) {
            products = new ArrayList<>(); // ƒê·∫£m b·∫£o kh√¥ng b·ªã null
        }
        ProductAdapter productAdapter = new ProductAdapter(this, products, product -> {
            toggleWishlist(product.getProductID());
        }, favoriteProductIds);
        recyclerProductGrid.setAdapter(productAdapter);
    }

    private void toggleWishlist(int productId) {
        if (!isLoggedIn()) {
            Toast.makeText(this, "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng wishlist", Toast.LENGTH_SHORT).show();
            startActivity(new Intent(this, LoginActivity.class));
            return;
        }

        if (favoriteProductIds.contains(productId)) {
            deleteFromWishlist(getCurrentCustomerId(), productId);
        } else {
            addToWishlist(getCurrentCustomerId(), productId);
        }
    }

    private void addToWishlist(int customerId, int productId) {
        api.addToWishlist(new WishlistAddRequest(customerId, productId)).enqueue(new Callback<ApiResponse>() {
            @Override
            public void onResponse(Call<ApiResponse> call, Response<ApiResponse> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    favoriteProductIds.add(productId);
                    // C·∫≠p nh·∫≠t l·∫°i item c·ª• th·ªÉ thay v√¨ to√†n b·ªô adapter s·∫Ω hi·ªáu qu·∫£ h∆°n
                    if (recyclerProductGrid.getAdapter() != null) {
                        recyclerProductGrid.getAdapter().notifyDataSetChanged();
                    }
                }
                Toast.makeText(CategoryActivity.this, response.body() != null ? response.body().getMessage() : "Th√™m th·∫•t b·∫°i", Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onFailure(Call<ApiResponse> call, Throwable t) {
                Toast.makeText(CategoryActivity.this, "L·ªói k·∫øt n·ªëi khi th√™m", Toast.LENGTH_LONG).show();
            }
        });
    }

    private void deleteFromWishlist(int customerId, int productId) {
        api.deleteFromWishlist(new WishlistDeleteRequest(customerId, productId)).enqueue(new Callback<ApiResponse>() {
            @Override
            public void onResponse(Call<ApiResponse> call, Response<ApiResponse> response) {
                if (response.isSuccessful() && response.body() != null && response.body().isSuccess()) {
                    favoriteProductIds.remove(productId);
                    if (recyclerProductGrid.getAdapter() != null) {
                        recyclerProductGrid.getAdapter().notifyDataSetChanged();
                    }
                }
                Toast.makeText(CategoryActivity.this, response.body() != null ? response.body().getMessage() : "X√≥a th·∫•t b·∫°i", Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onFailure(Call<ApiResponse> call, Throwable t) {
                Toast.makeText(CategoryActivity.this, "L·ªói k·∫øt n·ªëi khi x√≥a", Toast.LENGTH_LONG).show();
            }
        });
    }

    private void showLogoutConfirmDialog() {
        new AlertDialog.Builder(this)
                .setTitle("X√°c nh·∫≠n ƒëƒÉng xu·∫•t")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?")
                .setPositiveButton("ƒêƒÉng xu·∫•t", (dialog, which) -> logout())
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    private void logout() {
        SharedPreferences sp = getSharedPreferences("auth", MODE_PRIVATE);
        sp.edit().clear().apply();

        favoriteProductIds.clear(); // X√≥a danh s√°ch y√™u th√≠ch ·ªü local
        updateBottomNavLabel();
        Toast.makeText(this, "ƒê√£ ƒëƒÉng xu·∫•t", Toast.LENGTH_SHORT).show();

        Intent i = new Intent(this, LoginActivity.class);
        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        startActivity(i);
        finish();
    }
}